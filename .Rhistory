# create an array
environment
```r
contour (px, py, z , col = "purple ", level = 0.5, lwd=2, drawlabels=F, add=T)
library(randomForest)
## Classification:
data(iris)
# ======================== MDS for 2D visualization
# calculate the distance matrix for first 4 columns
irisDist <- dist(iris[,1:4])
irisMds = cmdscale(irisDist, k=2)
#  plot MDS result and color data points based on the 5th column
plot(irisMds)
text(irisMds[,1], (irisMds[,2]+max(irisMds[,2])*0.05), labels=1:nrow(irisMds), cex = 0.6, xpd = TRUE)
points(irisMds, col=c("red", "green", "blue")[as.numeric(iris$Species)])
# =========================  plot MDS and color data points based predication reslut (traing with origional dataset)
# random select 50 training samples
set.seed(1)
samp <- iris[sample(nrow(iris), 50), ]
iris.rf <- randomForest(Species ~ ., data=samp, proximity=TRUE, keep.forest=TRUE)
predicted<- predict(iris.rf, iris[,1:4])
plot(irisMds)
text(irisMds[,1], (irisMds[,2]+max(irisMds[,2])*0.05), labels=1:nrow(irisMds), cex = 0.6, xpd = TRUE)
points(irisMds, col=c("red", "green", "blue")[as.numeric(predicted)])
# =========================  plot MDS and color data points based predication reslut (traing on dataset after MDS)
irisMdsDf <- cbind(as.data.frame(irisMds), iris[,5])
names(irisMdsDf) <- c("x", "y", "Species")
samp <- irisMdsDf[sample(nrow(irisMdsDf), 50), ]
iris.rf <- randomForest(Species ~ ., data=samp, proximity=TRUE, keep.forest=TRUE)
predicted<- predict(iris.rf, irisMdsDf[,1:2])
plot(irisMds)
points(irisMdsDf[,1:2], col=c("red", "green", "blue")[as.numeric(predicted)])
# =========================  plot MDS and classification boundry
# create dataset with all possible data points
px <- seq(min(irisMdsDf$x), max(irisMdsDf$x), 0.02)
py <- seq(min(irisMdsDf$y), max(irisMdsDf$y), 0.02)
pgrid <-expand.grid (px, py)
names (pgrid) <- c ("x", "y")
predicted<- predict(iris.rf, pgrid)
z <- matrix(as.numeric(predicted), length(px), length(py))
plot(irisMdsDf[,1:2], col=c("red", "green", "blue")[as.numeric(irisMdsDf$Species)] )
contour (px, py, z , col = "purple", drawlabels=F, add=T,  level = 0)
contour (px, py, z , col = "purple", drawlabels=F, add=T,  level = 0)
contour (px, py, z , col = "purple", drawlabels=F, add=T,  level = 0.1)
contour (px, py, z , col = "purple",  add=T,  level = 0.1)
contour (px, py, z , col = "purple", drawlabels=F, add=T,  levels = 0.1)
contour (px, py, z , col = "purple", drawlabels=F, add=T,  levels = 1)
contour (px, py, z , col = "purple", drawlabels=T, add=T,  levels = 1)
contour (px, py, z , col = "purple", drawlabels=T, add=T)
iris
hist(Sepal.Length, breaks=5)
iris
plot(x=1:length(iris$Sepal.Length), y=iris$Sepal.Length ) # first plot
par(new=T) # tell R to draw over the first plot
plot(x=1:length(iris$Sepal.Length), y=iris$Sepal.Width) # do second plot.
axis(4, (range(iris$Sepal.Width)),ylab='iris$Sepal.Width') # draw second axis on the right
mtext("second Y", side=4, line=2.3, adj=0.5, cex=1) # add test label on the right
plot(x=1:length(iris$Sepal.Length), y=iris$Sepal.Length ) # first plot
par(new=T) # tell R to draw over the first plot
plot(x=1:length(iris$Sepal.Length), y=iris$Sepal.Length, type ="l") # first plot
plot(x=1:length(iris$Sepal.Length), y=iris$Sepal.Length, type ="p") # first plot
plot(x=1:length(iris$Sepal.Length), y=iris$Sepal.Length, type ="s") # first plot
plot(x=1:length(iris$Sepal.Length), y=iris$Sepal.Length, type ="l") # first plot
plot(x=1:length(iris$Sepal.Length), y=iris$Sepal.Length, type ="l") # first plot
par(new=T) # tell R to draw over the first plot
plot(x=1:length(iris$Sepal.Length), y=iris$Sepal.Width) # do second plot.
plot(x=1:length(iris$Sepal.Length), y=iris$Sepal.Width, type ="l") # do second plot.
plot(x=1:length(iris$Sepal.Length), y=iris$Sepal.Length, type ="l") # first plot
par(new=T) # tell R to draw over the first plot
plot(x=1:length(iris$Sepal.Length), y=iris$Sepal.Width, type ="l") # do second plot.
plot(x=1:length(iris$Sepal.Length), y=iris$Sepal.Length, type ="l", color="red") # first plot
par(new=T) # tell R to draw over the first plot
plot(x=1:length(iris$Sepal.Length), y=iris$Sepal.Width, type ="l") # do second plot.
plot(x=1:length(iris$Sepal.Length), y=iris$Sepal.Length, type ="l", color="red") # first plot
plot(x=1:length(iris$Sepal.Length), y=iris$Sepal.Length, type ="l", col="red") # first plot
plot(x=1:length(iris$Sepal.Length), y=iris$Sepal.Length, type ="l", col="red") # first plot
par(new=T) # tell R to draw over the first plot
plot(x=1:length(iris$Sepal.Length), y=iris$Sepal.Width, type ="l") # do second plot.
axis(1, (range(iris$Sepal.Width)),ylab='iris$Sepal.Width') # draw second axis on the right
plot(x=1:length(iris$Sepal.Length), y=iris$Sepal.Length, type ="l", col="red") # first plot
par(new=T) # tell R to draw over the first plot
plot(x=1:length(iris$Sepal.Length), y=iris$Sepal.Width, type ="l") # do second plot.
axis(2, (range(iris$Sepal.Width)),ylab='iris$Sepal.Width') # draw second axis on the right
plot(x=1:length(iris$Sepal.Length), y=iris$Sepal.Length, type ="l", col="red") # first plot
par(new=T) # tell R to draw over the first plot
plot(x=1:length(iris$Sepal.Length), y=iris$Sepal.Width, type ="l") # do second plot.
axis(2, (range(iris$Sepal.Width)),ylab='iris$Sepal.Width') # draw second axis on the right
par(oma=c(2,2,2,2)) # all sides have 2 lines of space margin
plot(x=1:length(iris$Sepal.Length), y=iris$Sepal.Length, type ="l", col="red") # first plot
par(new=T) # tell R to draw over the first plot
plot(x=1:length(iris$Sepal.Length), y=iris$Sepal.Width, type ="l") # do second plot.
axis(2, (range(iris$Sepal.Width)),ylab='iris$Sepal.Width') # draw second axis on the right
par(oma=c(2,2,2,2)) # all sides have 2 lines of space margin
plot(x=1:length(iris$Sepal.Length), y=iris$Sepal.Length, type ="l", col="red") # first plot
par(new=T) # tell R to draw over the first plot
plot(x=1:length(iris$Sepal.Length), y=iris$Sepal.Width, type ="l") # do second plot.
axis(4, (range(iris$Sepal.Width)),ylab='iris$Sepal.Width') # draw second axis on the right
par(oma=c(2,2,2,2)) # all sides have 2 lines of space margin
plot(x=1:length(iris$Sepal.Length), y=iris$Sepal.Length, type ="l", col="red") # first plot
par(new=T) # tell R to draw over the first plot
plot(x=1:length(iris$Sepal.Length), y=iris$Sepal.Width, type ="l") # do second plot.
axis(4, (range(iris$Sepal.Width)),ylab='iris$Sepal.Width') # draw second axis on the right
par(oma=c(2,2,2,2)) # all sides have 2 lines of space margin
plot(x=1:length(iris$Sepal.Length), y=iris$Sepal.Length, type ="l", col="red") # first plot
plot(x=1:length(iris$Sepal.Length), y=iris$Sepal.Width, type ="l", ylab="") # do second plot.
par(oma=c(2,2,2,2)) # all sides have 2 lines of space margin
plot(x=1:length(iris$Sepal.Length), y=iris$Sepal.Length, type ="l", col="red") # first plot
par(new=T) # tell R to draw over the first plot
plot(x=1:length(iris$Sepal.Length), y=iris$Sepal.Width, type ="l", ylab="") # do second plot.
par(oma=c(2,2,2,2)) # all sides have 2 lines of space margin
plot(x=1:length(iris$Sepal.Length), y=iris$Sepal.Length, type ="l", col="red") # first plot
par(new=T) # tell R to draw over the first plot
plot(x=1:length(iris$Sepal.Length), y=iris$Sepal.Width, type ="l", ylab="", ) # do second plot.
axis(4, (range(iris$Sepal.Width)),ylab='iris$Sepal.Width') # draw second axis on the right
par(oma=c(2,2,2,2)) # all sides have 2 lines of space margin
plot(x=1:length(iris$Sepal.Length), y=iris$Sepal.Length, type ="l", col="red") # first plot
par(new=T) # tell R to draw over the first plot
plot(x=1:length(iris$Sepal.Length), y=iris$Sepal.Width, type ="l", ylab="", yaxt='n' ) # do second plot.
axis(4, (range(iris$Sepal.Width)), ylab='iris$Sepal.Width') # draw second axis on the right
x<- 1:10
y1 <- 1:10
y2 <- 40:30
par(oma=c(2,2,2,2)) # all sides have 2 lines of space margin
plot(x=x, y=y1, type="l", col="red") # first plot
par(new=T) # tell R to draw over the first plot
plot(x=x, y=y2, type ="l", ylab="", yaxt='n' ) # do second plot.
axis(4, (range(y2)), ylab='y2') # draw second axis on the right
x<- 1:10
y1 <- 1:10
y2 <- 40:30
par(oma=c(2,2,2,2)) # all sides have 2 lines of space margin
plot(x=x, y=y1, type="l", col="red") # first plot
par(new=T) # tell R to draw over the first plot
plot(x=x, y=y2, type ="l", ylab="", yaxt='n' ) # do second plot.
y2 <- 40:31
plot(x=x, y=y2, type ="l", ylab="", yaxt='n' ) # do second plot.
y2 <- sample(seq(1:100), 10)
plot(x=x, y=y1, type="l", col="red") # first plot
par(new=T) # tell R to draw over the first plot
plot(x=x, y=y2, type ="l", ylab="", yaxt='n' ) # do second plot.
axis(4, (range(y2)), ylab='y2') # draw second axis on the right
x<- 1:10
y1 <- sample(seq(1:50), 10)
y2 <- sample(seq(100:200), 10)
par(oma=c(2,2,2,2)) # all sides have 2 lines of space margin
plot(x=x, y=y1, type="l", col="red") # first plot
par(new=T) # tell R to draw over the first plot
plot(x=x, y=y2, type ="l", ylab="", yaxt='n' ) # do second plot.
axis(4, (range(y2)), ylab='y2') # draw second axis on the right
mtext("second Y", side=4, line=2.3, adj=0.5, cex=1) # add test label on the right
ar <- array(3, 5)
class(array)
class(ar)
x <- rnorm(100)
y <- rexp(100)
qqplot(x, y)
qqline(x)
qqline(x,y)
qqline()
hist(iris$Sepal.Length, breaks=10)
rug(quantile(iris$Sepal.Length), col=2, lwd=2.5)
rug(iris$Sepal.Length, col=2, lwd=2.5)
require(stats)  # both 'density' and its default method
with(faithful, {
plot(density(eruptions, bw = 0.15))
rug(eruptions)
rug(jitter(eruptions, amount = 0.01), side = 3, col = "light blue")
})
rug(iris$Sepal.Length, col=2)
# Histogram with 5 breakpoints
hist(iris$Sepal.Length, breaks=10)
rug(iris$Sepal.Length, col=2)
plot(density(iris$Sepal, bw = 0.15))
rug(iris$Sepal)
# both 'density' and its default method
plot(density(iris$Sepal.Length))
rug(iris$Sepal.Length)
x <- rnorm(1000)
plot(density(x))
rug(x)
x <- rnorm(500)
plot(density(x))
rug(x)
# both 'density' and its default method
x <- rnorm(500)
plot(x, type = 'n')
rug(x)
plot(x, type = 'n')
plot(x)
rug(x)
```{r}
# both 'density' and its default method
x <- rnorm(500)
plot(density(x))
rug(x)
```
se = seq(8, 3) # 8,7,6,5,4,3
se <- seq(3, 8, by=2) #  3, 5, 7
class(se)
